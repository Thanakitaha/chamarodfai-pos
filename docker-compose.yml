services:
  db:
    build:
      context: ./database
      dockerfile: Dockerfile
    image: postgres:16
    container_name: pos-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      PGDATA: /var/lib/postgresql/data
    volumes:
      - db_data:/var/lib/postgresql/data
      # ถ้ามีสคริปต์ init SQL ให้วางที่ ./database/init
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-55432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./webapp/server
      dockerfile: Dockerfile
    container_name: pos-api
    depends_on:
      db:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: ${PORT}
      STORE_ID: ${STORE_ID}
      DATABASE_URL: ${DATABASE_URL}
    expose:
      - "${PORT}"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:${PORT}/api/health"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 20s

  web:
    build:
      context: ./webapp/client
      dockerfile: Dockerfile
      args:
        VITE_USE_SHEETS: ${VITE_USE_SHEETS}
    container_name: pos-web
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "${WEB_PORT}:80"
    # ถ้ามีไฟล์อัปโหลดหรือ asset dynamic อื่น ๆ ค่อยเพิ่ม volume/mount ทีหลัง

volumes:
  db_data:
